priority 60

########
# import
########

snippet imp-format
	import util from "util";

snippet imp-curl
	import fetch from "node-fetch"

snippet imp-jwt
	import jwt_decode from "jwt-decode";
snippet imp-assert
	import { strict as assert } from 'assert';

########
#  A ~ E
########
snippet async-run
	let main = async () => {
		const bar = await baz();
		// do smt with bar
	};
	main();

snippet class_name
	this.constructor.name

snippet chr
	String.fromCharCode(${0});

snippet desc "Describe" b
	describe('${1:}', function() {//{{{
		it('${2}', function() {
			${0}
			assert.equal("", "");
		});
	});//}}}

snippet exp "expect" b
	expect(${1:})${0};
snippet expe "expect" b
	expect(${1:}).to.equal(${0});
snippet expd "expect" b
	expect(${1:}).to.deep.equal(${0});

snippet er
	console.error(${0});

snippet exec
	import {execSync} from 'child_process'
	let ret = execSync(command, {stdio: 'pipe'});
	console.dir(ret, {depth: null, colors: true})

snippet class
	function ${1:function_name}() {//{{{
		${0}
	}//}}}
	var o = $1.prototype;
	o.xxx = function() {
	}

snippet clone
	let new = Object.assign({}, org);

snippet curl
	var headersOpt = {
		"User-Agent": "curl/xxx.0"
	};
	// Use cert and key
	const agent = new https.Agent({
		key: fs.readFileSync(key),
		cert: fs.readFileSync(cert),
		rejectUnauthorized: false
	})
	await fetch(url, {
		agent: agent,
		headers: headersOpt
	})
		.catch(err => {
			console.error(err);
			throw new Error('error message')
		})
		.then(res => {
			if (res && res.status === 200) {
				return res.text()
					.then(body => {
						return body;
					});
			} else if (!res){
				throw new Error(`error message`)
			} else {
				return res.text()
					.then(body => {
						throw new Error(`error message, resp = ${body}`)
					})
			}
		});

snippet curl-post
	var headersOpt = {
		"User-Agent": "curl/xxx.0",
		"content-type": "application/json"
	};
	let body = {}
	await fetch(url, {
		method: 'POST',
		headers: headersOpt,
		body: JSON.stringify(body),
	})
		.catch(err => {
			console.error(err);
			throw new Error('error message')
		})
		.then(res => {
			if (res) return res.text();
			throw new Error('error message')
		});

snippet cwd
	process.cwd()

snippet date
	let now = new Date()
	let date = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;

snippet date-timezone
	import moment from 'moment-timezone'
	let date = moment.tz(new Date(), 'Asia/Taipei')
	let str = date.format('YYYY-MM-DD HH:mm:ss z')

snippet exit
	process.exit(1)

snippet export
	// es6
	export let c = {}
	// common js
	module.exports = xx

snippet dirpath
	__dirname

snippet doc
	/**
	*
	*/

snippet decorator
	function log(target, name: string, descriptor: any) {
		let orgFunc = descriptor.value;
		descriptor.value = function () {
			log.info(`xxd${name}`)
			return orgFunc.apply(this, arguments)
		}
	}

snippet array-remove
	function removeItem(arr, value) {
		var index = arr.indexOf(value);
		if (index > -1) {
		  arr.splice(index, 1);
		}
		return arr;
	}

########
#  F ~ J
########

snippet for
	for (${1};${2};${3}) {
		${0}
	}

snippet for-object
	Object.keys(obj).forEach(function(key) {
		console.log("key %s, value %s", key, obj[key]);
	});

snippet for-array
	array.forEach(function(value, index) {
		console.log("value: %s, index: %d", value, index);
	});

snippet func
	function ${1}() { //{{{
		${2}
	} //}}}

snippet file_get_contents
	fs.readFileSync(${1}, {encoding:'utf8', flag:'r'});

snippet file_put_contents
	fs.writeFileSync(${1:filename}, ${2:content}, {encoding:'utf8', flag:'w'});

snippet file_read_line_by_line
	let file = "x.txt"
	let fileStream = fs.createReadStream(file);
	let rl = readline.createInterface({
		input: fileStream,
		crlfDelay: Infinity
	});
	for await (const line of rl) {
		log.info(line)
	}

snippet format
	util.format("string %s", a);

snippet format-property
	function format(string, keys = {}) {
		Object.keys(keys).forEach(function(key) {
			string = string.replace(new RegExp("\\{" + key + "\\}", "g"), keys[key]);
		});
		return string;
	}

snippet foreach
	${1}.forEach(function(val, index) {
		$(0)
	});


snippet it "it" b
	it('${1:}', function() {
		${0}
	});

snippet if
	if (${1}) {

	}

snippet json-parse
	JSON.parse(body);

snippet json-print
	import util from 'util'
	console.dir(text, {depth: null, colors: true});

snippet jwt-decode
	let jwtDecoded = jwt_decode("token", { header: true });
	console.log("jwtDecoded" , jwtDecoded);

snippet join
	variable.join(",")

########
#  K ~ O
########

snippet log
	console.log(${0});

snippet mocha
	var assert = require('assert');

	describe("Test Method ", function() {//{{{
		it("normal case", function() {
			assert.equal("", "");
		});
	});//}}}

snippet multiline
	var s=`aaa
		${0}
	`

snippet ord
	${0}charAt(0);

snippet mkdir
	fs.mkdirSync("a/b/", { recursive: true })

########
#  P ~ T
########

snippet promise
	Q.Promise(function (resolve, reject, notify) {
		${0}
	});

snippet proto
	o.${1} = function() {
		$(0)
	}

snippet options
	import { Command } from 'commander';
	let program = new Command();
	program.version('0.0.1')
		.option('-d, --debug [type]', 'enable debug or not', 'default')
		.option('-f, --file [string]', 'read from file', '')
		.requiredOption('-a, --age [int]', 'your age')
		.parse(process.argv);

	const options = program.opts();
	if (options.debug === "true") console.log('Enable debug');

snippet re
	require('${1:fs}');


snippet strict
	"use strict";
snippet time
	Math.round((new Date).getTime()/1000)


snippet path_file
	import { dirname } from 'path';
	import { fileURLToPath } from 'url';
	let filePath = import.meta.url;
	const dirname = dirname(filePath));


snippet path_cwd
	process.cwd()



snippet padleft
	i.toString().padStart(10, '0')

snippet padright
	i.toString().padEnd(10, '0')
	number.toPrecision(5) or toFixed(5)

snippet sleep
	const delay = ms => new Promise(resolve => setTimeout(resolve, ms))
	await delay(1000)

snippet throw
	throw new Error('error message')

snippet try
	try {

	} catch (e) {

	}

snippet reduce
	let res = ["a", "b"].reduce((pre, cur) => {
		return pre + ","+ cur
	}, "init");

snippet query_params
	new URLSearchParams(param).toString() // not support boolean
	protected toParams(entries) {
		const result = []
		for (let key in entries) {
			result.push(`${key}=${entries[key]}`);
		}
		return result.join("&");
	}

snippet sort
	sortByTime = array.sort((a, b) => (a.time > b.time) ? -1 : 1)

snippet regular_match_all
	let matches = [...content.matchAll(/(https?:)?\/\/.+/g)]
	for (let match of matches) {
		match[0] is full content
	}
########
#  U ~ Z
########
