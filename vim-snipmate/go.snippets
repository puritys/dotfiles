snippet imppath
	import "runtime"
	import "path"
	import "os"

snippet impcurl
	"io/ioutil"
	net/http"

snippet impcurl-tls-cert
	"crypto/tls"
	"crypto/x509"

snippet im
	import "${1:package}"

snippet immysql
	import "database/sql"



snippet main
	package main
	import (
		"fmt"
		"log"
	)

	func main() {

	}

snippet pr
	fmt.Printf(${1:/* var */})

snippet if
	if ${1:/* condition */} {
		${2}
	} else {
		${3}
	}
	${0}
snippet for
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${0}
	}

snippet bytetostring
	string(body)


snippet mysql
	db, err := sql.Open("mysql", "root:@/test?charset=utf8");
	if err != nil {
		fmt.Println("error = %s", err);
		os.Exit(1);
	}
	ret, err := db.Query("select * from Person");
	if err != nil {
	log.Fatal(err);
	}
	for ret.Next() {
		var id int
		var email string
		if err := ret.Scan(&id, &email); err != nil {
			log.Fatal(err);
		}
	}

snippet path_file
	_, filename, _, _ := runtime.Caller(1)
	fmt.Println(filename);
snippet dirpath
	_, filename, _, _ := runtime.Caller(1)
	fmt.Println(path.Dir(filename))

snippet path_cwd
	cwd, _ := os.Getwd()

snippet cwd
	cwd, _ := os.Getwd()

snippet curl
	resp, err := http.Get("http://example.com/")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	b = string(body)
snippet curlpost
	resp, err := http.Post("http://example.com/upload", "image/jpeg", &buf)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)

snippet curlpostform
	resp, err := http.PostForm("http://example.com/form",
		url.Values{"key": {"Value"}, "id": {"123"}})
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)

snippet strtojson-map
	str := "{...}"
	var result map[string]interface{}
	json.Unmarshal([]byte(str), &result)
snippet switch
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}

snippet strtobyte
	[]byte(str)

snippet sprintf
	fmt.Sprintf("%${1:s}", ${2:var})
