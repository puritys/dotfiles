snippet local-jar
	files("/home/xxx.jar")

snippet fat-jar
	task fatJar(type: Jar) {
		baseName = project.name + '-all'
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
	}

snippet application
	buildscript {
		dependencies {
			classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
		}
	}
	plugins {
		id 'com.github.johnrengelman.shadow' version '7.0.0'
		id 'java'
	}
	repositories {
		jcenter()
	}
	shadowJar {
		baseName = 'shadow'
		classifier = null
		version = null
	}
	task runApp(type: JavaExec) {
		classpath = sourceSets.main.runtimeClasspath
		main = "com.puritys.App"
	}

snippet fat-application
	buildscript {
		dependencies {
			classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
		}
	}
	plugins {
		id 'com.github.johnrengelman.shadow' version '7.0.0'
		id 'java'
	}
	shadowJar {
		baseName = 'shadow'
		classifier = null
		version = null
	}

snippet main
	plugins {
		id "application"
		id "eclipse"
		id "idea"
		id "maven"
		id "java-library"
		id "java"
	}
	// ./gradlew run
	application {
		mainClassName = 'com.puritys.App'
	}
	// ./gradlew runApp -i --args="-Dapp=xxx"
	ext {
		app = System.getProperty('app') ? System.getProperty('app') : "TestKt"
	}
	task runApp(type: JavaExec) {
		classpath = sourceSets.main.runtimeClasspath
		main = project.ext.app
	}


snippet impoptions
	'commons-cli:commons-cli:1.4'

snippet impdynamodb
	"com.amazonaws:aws-java-sdk-dynamodb:1.11.531",

snippet impdynamodblocal
	"com.almworks.sqlite4java:sqlite4java:1.0.392",
	"com.almworks.sqlite4java:libsqlite4java-linux-amd64:1.0.392",
	"com.amazonaws:DynamoDBLocal:1.11.119"

snippet impstring
	"org.apache.commons:commons-lang3:3.9"

snippet impguice
	"com.google.inject:guice:4.2.2"

snippet impinject
	"com.google.inject:guice:4.2.2"

snippet impgson
	"com.google.code.gson:gson:1.7.1"
	"org.json:json:20190722"

snippet impjson
	"org.json:json:20210307"

snippet impjson_path
	"com.jayway.jsonpath:json-path:2.5.0"

snippet impasync_client
	"org.asynchttpclient:async-http-client:2.12.2"

snippet impapache
	"org.apache.commons:commons-lang3:3.10",

snippet impbasic
	"org.apache.commons:commons-lang3:3.10",
	"com.google.code.gson:gson:1.7.1",
	"org.json:json:20190722"


snippet implog
	"org.slf4j:slf4j-api:1.7.25",
	"org.slf4j:slf4j-jdk14:1.7.25",

snippet implog-simple
	"org.slf4j:slf4j-simple:1.7.25"
	src/main/resources/simplelogger.properties : org.slf4j.simpleLogger.defaultLogLevel=debug

snippet dep
	dependencies {
		implementation (
			"a:b:${version}"
		)
	}

snippet method_name
	Thread.currentThread().getStackTrace()[1].getMethodName()

snippet repo
	allprojects {
		repositories {
			mavenCentral()
			maven { url "http://maven.corp.xxx.x/xic" }
		}
	}

snippet compile
	compileJava {
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	}

snippet cucumber
	dependencies {
		testCompile (
			'io.cucumber:cucumber-java:5.6.0',
			'io.cucumber:cucumber-junit:5.6.0',
			'io.cucumber:cucumber-picocontainer:5.6.0'
		)
		testCompile (
			"org.apache.commons:commons-lang3:3.10",
			"org.codehaus.jackson:jackson-mapper-asl:1.9.13",
			"com.google.code.gson:gson:1.7.1",
			"org.json:json:20190722",
			"org.slf4j:slf4j-api:1.7.25",
			"org.slf4j:slf4j-jdk14:1.7.25",
		)
	}
	configurations {
		cucumberRuntime {
			extendsFrom testRuntime
		}
	}
	ext {
		tag = project.properties['tag'] ?: "@prod"
	}
	task cucumber() {
		dependsOn assemble, compileTestJava
		doLast {
			javaexec {
				systemProperties System.properties
				main = "io.cucumber.core.cli.Main"
				classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
				args = ['--plugin', 'pretty', '--plugin', 'json:target/cucumber.json', '--glue', 'namespace.name', 'src/test/resources', '--tags',  project.ext.tag]
			}
		}
	}

snippet cucumber_run
	task cucumber() {
		sourceSets.main.java.srcDirs = ['src/zzz/']
		dependsOn assemble, testClasses
		System.setProperty("sss", "yyy")
		doLast {
			javaexec {
				systemProperties System.properties
				main = "io.cucumber.core.cli.Main"
				classpath = configurations.cucumberRuntime + sourceSets.test.output
				args = ['--plugin', 'pretty', '--plugin', 'json:target/cucumber.json', '--glue', 'integration', 'src/test/resources', '--tags',  project.ext.tag]
			}
		}
	}

snippet dep_local
	project (":common")

snippet test_before
	task buildDir(type: Exec) {
		executable "sh"
		args "-c", "mkdir -p /home/xxx"
	}
	tasks.test.dependsOn("buildDir")

# -----------
# Protobuf
# -----------

snippet protobuf
	plugins {
		id "java"
		id "com.google.protobuf" version "0.8.12"
	}
	dependencies {
		compile (
				"com.google.protobuf:protobuf-java:3.8.0"
		)
	}
	sourceSets {
		main {
			proto {
				srcDir 'src/main/java/com/proto'
				include '**/*.proto'
			}
			java {
				srcDirs 'src/main/java', 'build/generated/source/proto/main/java'
			}
		}
	}
	protobuf {
		// Configure the protoc executable
		protoc {
			// Download from repositories
			artifact = 'com.google.protobuf:protoc:3.7.0'
		}
	}

snippet imp_proto
	"com.google.protobuf:protobuf-java:3.8.0",
	"com.google.protobuf:protobuf-java-util:3.17.3"
