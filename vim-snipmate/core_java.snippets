priority -60

#######
# A - F
#######

snippet execute-submit
	ExecutorService.submit(() -> {  })

snippet exec-promise
	import {execSync, exec} from "child_process";
	import util from 'util';
	const execPromise = util.promisify(exec);

snippet date-string
	new Date().toString())

snippet dateToTime
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
	dateFormat.setTimeZone(TimeZone.getTimeZone("Asia/Taipei"));
	try {
		return dateFormat.parse("20200101").getTime();
	} carch (Exception e) {

	}

snippet filewrite
	try {
		FileOutputStream out = new FileOutputStream("filename");
		out.write(data.getBytes());
		out.close();
	} catch (Exception e) {
		LOG.error("Exception, err = " + e.getMessage());
	}

snippet fileread
	String text = new String(Files.readAllBytes(Paths.get("filename")), StandardCharsets.UTF_8);

snippet fileread_linebyline
	BufferedReader bufReader = null;
	File file = new File(filePath);
	if (!file.isFile()) {
		throw exception
	}
	try {
		bufReader = new BufferedReader(
		new InputStreamReader(new FileInputStream(file), Charset.forName("Big5"))
		String line;
		while ((line = bufReader.readLine()) != null) {
		}
	} catch (Exception e) {
	} finally {
		bufReader.close();
	}



snippet calender
	Calendar startTime = Calendar.getInstance(TimeZone.getTimeZone("Asia/Taipei"));
	startTime.setTimeInMillis(1583921131000L);
	System.out.println("date " + startTime.getTime());


# -------------
# Future / Complete Future
# -------------

snippet future-simple
	CompletableFuture<String> completableFuture
		= CompletableFuture.supplyAsync(() -> "Hello")

snippet future-combo
	CompletableFuture<String> completableFuture
		= CompletableFuture.supplyAsync(() -> "Hello")
		.thenCompose(s -> {
				xx;
				CompletableFuture.supplyAsync(() -> s + " World");
	});

snippet future-multi-request
	CompletableFuture<String> f1 = sss.get();
	CompletableFuture<Integer> f2 = zzz.get(qs);
	return CompletableFuture.allOf(f1, f2
	).thenCompose(non -> {
		String s = f1.join();
		Integer i= f2.join();
	});


#######
# G - K
#######

snippet impgsontype
	import com.google.gson.reflect.TypeToken;
	import java.lang.reflect.Type;

snippet imp-instant
	import java.time.Instant;
	import java.time.ZonedDateTime;
	import java.time.ZoneId;
	import java.time.temporal.ChronoUnit;
	import java.time.format.DateTimeFormatter;

snippet gsontype
	Type lastKeyType = (new TypeToken<Map<String, AttributeValue>>() { }).getType();
	GSON.fromJson(data, lastKeyType)


#######
# L - Q
#######
snippet log
	System.out.println(${1});

snippet optional_if
	String text = Optional.ofNullable(t1).orElseGet(() -> getT2());
# -----------
# Protobuf
# -----------

snippet proto
	syntax = "proto3";
	package com.xxx.yyy;
	option java_outer_classname = "ZzzProto";
	enum Option {
		A = 0
		B = 1
	}
	message Msg {
		string id = 1;
		Option opt = 2; // A or B
		string name = 3;
		repeated string aList = 4;
	}


snippet proto_enum
	enum Option {
		A = 0
		B = 1
	}
#######
# R - W
#######
snippet resource_path
	this.getClass().getClassLoader().getResource("xxx").getPath();

snippet runable_func
	public <T> T getObj(Callable<T> func) {
		return (T) func.call();
	}
snippet sort
	List<Employee> emplyees;
	Comparator<Employee> compareById = (Employee o1, Employee o2) ->
										o1.getId().compareTo( o2.getId() );
	Collections.sort(emplyees, compareById);

snippet timeToDate
	ZonedDateTime date = ZonedDateTime.ofInstant(i, ZoneId.of("Asia/Taipei"));
	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
	System.out.println("date " + date.format(formatter));

snippet sha
	try {
		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		return new String(digest.digest("text".getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
	} catch (Exception e) {
		logger.error("err");
	}


snippet ssl_skip_certificate
	import javax.net.ssl.SSLContext;
	import javax.net.ssl.TrustManager;
	import javax.net.ssl.X509TrustManager;
	import javax.net.ssl.KeyManager;
	import javax.net.ssl.KeyManagerFactory;

	KeyManager[] kms = null;
	String keyManagerFactoryAlgorithm = KeyManagerFactory.getDefaultAlgorithm();
	KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyManagerFactoryAlgorithm)
	kms = kmf.getKeyManagers();
	final SSLContext context = sslContextFactory.createSslContext().init(kms, new AcceptAllTrustManager(), null)
	public static class AcceptAllTrustManager implements X509TrustManager {

		@Override
		public void checkClientTrusted(X509Certificate[] arg0, String arg1)
			throws CertificateException {
		// Nothing to do here
		}

		@Override
		public void checkServerTrusted(X509Certificate[] arg0, String arg1)
			throws CertificateException {
		// Nothing to do here
		}

		@Override
		public X509Certificate[] getAcceptedIssuers() {
			return new X509Certificate[0];
		}
	}

#######
# X - Z
#######


snippet print
	System.out.println(${1});

snippet logline
	System.out.println(new Throwable().getStackTrace()[0].getLineNumber());

snippet logger
	private static final Logger LOG = LoggerFactory.getLogger(${1}.class);

snippet implogger
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
snippet implist
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.Iterator;
	import java.util.List;
snippet impjson
	import org.json.JSONObject;
	import org.json.JSONArray;
snippet impgson
	import com.google.gson.Gson;

snippet imppair
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.commons.lang3.tuple.MutablePair;

snippet impmockito
	import static org.junit.Assert.assertEquals;
	import static org.junit.Assert.assertNotEquals;
	import static org.junit.Assert.assertTrue;
	import static org.mockito.Matchers.any;
	import static org.mockito.Matchers.anyInt;
	import static org.mockito.Matchers.anyString;
	import static org.mockito.Matchers.anyObject;
	import static org.mockito.Mockito.when;
	import static org.mockito.Mockito.doNothing;
	import static org.mockito.Mockito.mock;
	import static org.mockito.Mockito.doReturn;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.Spy;
	import org.mockito.MockitoAnnotations;

snippet imppowermock
	import static org.powermock.api.mockito.PowerMockito.when;
	import org.powermock.core.classloader.annotations.PrepareForTest;
	import org.powermock.modules.junit4.PowerMockRunner;
	import org.powermock.api.mockito.PowerMockito;

snippet impprovider
	import org.junit.*
	import com.tngtech.java.junit.dataprovider.DataProvider;
	import com.tngtech.java.junit.dataprovider.DataProviderRunner;
	import com.tngtech.java.junit.dataprovider.UseDataProvider;
	import org.junit.runner.RunWith;


snippet impinject
	import com.google.inject.Inject;

snippet impdate
	import java.text.ParseException;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;
	import java.util.Date;
	import java.sql.Timestamp;
	import java.util.Locale;
	import java.util.TimeZone;

snippet impstring
	import org.apache.commons.lang3.StringUtils;

snippet imparray
	import java.util.Arrays;

snippet impexception
	import java.util.concurrent.ExecutionException;
	import java.io.IOException;

snippet impapache
	import org.apache.commons.lang3.builder.ToStringBuilder;
	import org.apache.commons.lang3.builder.ToStringStyle;

snippet impbase64
	import org.apache.commons.codec.binary.Base64;

snippet impguicebinder
	import com.google.inject.AbstractModule;
	import com.google.inject.Singleton;

snippet impguice
	import com.google.inject.Guice;
	import com.google.inject.Injector;

snippet impfile
	import java.io.FileOutputStream;
	import java.nio.file.Paths;
	import java.nio.file.Files;
	import java.nio.charset.StandardCharsets;

snippet impguavacache
	import com.google.common.cache.Cache;
	import com.google.common.cache.CacheBuilder;
	import com.google.common.cache.CacheStats;

snippet impreg
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;

snippet impclone
	import org.apache.commons.lang.SerializationUtils;

snippet implog
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

snippet sleep
	TimeUnit.SECONDS.sleep(3);


snippet bytetostring
	new String(byte[]xxx, StandardCharsets.UTF_8);

snippet string-multipleline
	String a = """
		a
		bb
	""";

# -----------
# JSON
# -----------
snippet jsonnew
	JSONObject jsonObject = new JSONObject("{}");
snippet jsonob
	JSONObject
snippet jsonar
	JSONArray
snippet jsonarrayfor
	for (int i = 0; i < json.length(); i++) {
		JSONObject job = json.optJSONObject(i);
	}

snippet jsonpath
	ReadContext ctx = JsonPath.parse(json);
	String text = ctx.read("$.store.book[1].author");


snippet impMap
	import java.util.Map;

snippet exdate
	try {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
		Date date = format.parse("2012-11-17T12:10:00.000+08:00");
		int d = (int)date.getTime();
		System.out.println("time = " + Integer.toString(d));
	} catch (Exception ParseException) {

	}

snippet dateExample
	Calendar i = Calendar.getInstance();
	i.setTimeInMillis((long)time * 1000);
	i.set(Calendat.YEAR, xxx);
	System.out.println("Year =" + i.get(Calendar.YEAR) + " month = " + i.get(Calendar.MONTH));

snippet itoa
	Integer.toString(${1});

snippet itof
	(float) ${1};

snippet atoi
	Integer.parseInt(${1});

snippet atol
	Long.parseLong(${1});

snippet empty "check string is empty"
	StringUtils.isBlank(${1});

snippet (empty "check string is empty in if condition"
	(StringUtils.isBlank(${1})

snippet main
	public class main {

		public static void main (String[] args) {
			${1}
		}
	}

snippet class_private
	final class Field {

		private Field() {
			throw new IllegalStateException("Don't initiate class");
		}
	}

snippet enum
	public enum ${0} {
		{1}
	}

snippet enumof
	private static Map<String, Class> enumMap = new HashMap<>();
	static {
		for (Clas c: Class.values()) {
			enumMap.put(c.name(), c);
		}
	}
	public static Class of(String val) {
		if (!enumMap.containsKey(val)) {
			throw new IllegalArgumentException(
			"No enum constant " + val);
		} else {
			return enumMap.get(val);
		}
	}

snippet sw
	switch(${1}) {
		case 1:
			break;
		case 3:
			break;
	}

snippet if
	if (${1}) {

	}

snippet for
	for (int i = 0; i < n ; i++) {
	}

snippet forMap
	for (Map.Entry<String, String> entry : map.entrySet()) {
		System.out.println(entry.getKey() + "/" + entry.getValue());
	}

snippet random
	import java.util.Random;
	Random ran = new Random();
	ran.nextInt(42);

snippet random-uuid
	import java.util.UUID;
	UUID uuid = UUID.randomUUID();
	String id = uuid.toString();

snippet list
	List<String> status = Arrays.asList("0", "1");

snipet list-partition
	import org.apache.commons.collections4.ListUtils;
	List<String> p = ListUtils.partition(ps, 10);

snippet list-synchronized
	List<String> ex = Collections.synchronizedList(new ArrayList<>());

snippet listempty
	List<String> status = new ArrayList<>();

snippet listtomap
	List<Person> persons = new ArrayList<>();
	persons.add((new Person()).setName("aaa1").setAge(12));
	persons.add((new Person()).setName("aaa2").setAge(13));
	Map<String, Person> p = persons.stream().collect(
		Collectors.toMap(Person::getName,  Function.identity(), (u1, u2) -> u1)
	);

snippet listtomap2
	import org.apache.commons.collections4.MapUtils;
	MapUtils.populateMap(map, list, Animal::getId);

snippet set
	Set<String> m = new HashSet<String>(Arrays.asList("0", "1"));

snippet classname
	this.getClass().getSimpleName();

snippet arrayToList
	List<String> list = Arrays.asList(args);

snippet arrayinit
	new ArrayList<String>() {
	   {
		add("a");
		add("b");
	   }
	};

snippet map
	Map<String, String> m = new HashMap<>();

snippet map-entry
	Map.Entry<String, String> m = new AbstractMap.SimpleEntry<String, String>("a", "b");

snippet map-initialize
	import com.google.common.collect.ImmutableMap;
	private static Map<String, String> m = ImmutableMap.<String, String>builder()
		.put("id", "id")
		.put("image", "image")
	.build();

snippet map-stream-filter-value
	<String, String>maObj.entrySet().stream()
		.filter(e -> e.getValue() == "value")
		.map(Map.Entry::getValue)
		.collect(Collectors.toList());

snippet time
	System.currentTimeMillis();

snippet doc
	/**
	 * ${0}
	 * @param xxx xxx
	 * @return String
	 */

snippet func
	public void function ${1}() {
		${2}
	}

snippet unit
	package com.xxx;
	import static org.junit.Assert.assertEquals;
	import org.junit.*;

	public class AppTest {
		private App tester;

		@Before
		public void setUp() throws Exception {
			this.tester = new App();
		}

		@Test
		public void testApp() throws exception {
			String ret = this.tester.getLink(1);
			assertEquals("The url should be xxxx", "http://", ret);
	 	}
	}

snippet unitexception
	@Test(expected = Exception.class)

snippet guicemodule
	package com.xx;
	import com.google.inject.AbstractModule;

	public class GuiceModule extends AbstractModule {

		@Override
		protected void configure() {
			bind(Car.class).to(CartImpl.class);
		}

	}

snippet guice_injecter
	import com.google.inject.Guice;
	import com.google.inject.Injector;
	Injector injector = Guice.createInjector(
		new GuiceModule()
	);
	injector.injectMembers(p);

snippet pathCurrent
	Paths.get("").toAbsolutePath().toString()

snippet pathDir
	this.getClass().getClassLoader().getResource("").getPath()

snippet join
	String.join(",", list);

snippet isfile
	File f = new File("f");
	if (f.exists() && !f.isDirectory()) {

	}

snippet forMap
	for (Map.Entry<String, String> entry : keys.entrySet()) {
		entry.getKey();
		entry.getValue();
	}

snippet upperCase
	str.toUpperCase()

snippet pmdSkip
	@SuppressWarnings({"PMD.NPathComplexity", "PMD.ExcessiveMethodLength", "PMD.NonStaticInitializer"})

snippet pmdSkipDefault
	@SuppressWarnings({"PMD.SwitchStmtsShouldHaveDefault"})

snippet pmdSkipEmptyCatch
	@SuppressWarnings("PMD.EmptyCatchBlock")

snippet pmdSkipCouplingBetweenObjects
	@SuppressWarnings("CouplingBetweenObjects")

snippet pmdSkipEnum
	@SuppressWarnings({"PMD.TooFewBranchesForASwitchStatement"})

snippet pmdmagicnumber
	@SuppressWarnings({"checkstyle:magicnumber"})

snippet pmddeprecate
	@SuppressWarnings("deprecation")

snippet pmd_typesafe
	@SuppressWarnings("unchecked")

snippet jsonType
	if (json.has("zzz")) {
		Object aObj = json.get("zzz");
		if(aObj instanceof JSONArray){
			json.getJSONArray("cust_category");
		}
	}

snippet reg
	Pattern p = Pattern.compile("embed/[a-zA-Z0-9-]+");
	Matcher m = p.matcher("embed/zzz");
	if (m.find()) {
		string id = m.group();
		id = id.substring(6);
	}

snippet splitToList
	Arrays.asList("aa,aa".split(","));

snippet spliteToList-filter
	List<String> list = Stream.of(id.split(","))
		.map(String::trim)
		.filter(s -> !s.isEmpty())
		.collect(Collectors.toList());

snippet explode
	str.split("\04");

snippet forFields
	for (Field f : this.getClass().getDeclaredFields()) {
		if (f.getName().equals(key)) {
			return (int) f.get(this);
		}
	}

snippet enumFor
	for (Enum e: Enum.values()) {
		e.name();
	}

snippet urlencode
	java.net.URLEncoder.encode(url, "UTF-8");

snippet urldecode
	java.net.URLDecoder.decode(url, "UTF-8");


snippet base64decode
	Base64.decodeBase64(str);

snippet guavacachedef
	private static Cache<String, String> localMemCache;
	static {
		localMemCache = CacheBuilder.newBuilder()
			.expireAfterWrite(CACHE_TIMEOUT, TimeUnit.SECONDS)
			.recordStats()
			.build();
	}

snippet guavacachecode
	String token = localMemCache.get(TOKEN_CACHE_PREFIX + Id,
	new Callable<String>() {
		@Override
		public String call() {
			String t = fetchName(id);
			return t;
		}
	});

snippet guicecode
	bind(xx.class);
	bind(xxInterface.class).to(xxImplements.class);

snippet bindannotiation
	bind(xxx.class).annotatedWith(Names.named("new_name")).toInstance(new xxx());

snippet guicecodesingleton
	bind(xx.class).toInstace(obj);

snippet stringtobuyte
	"aa".getBytes()

snippet clone
	Object new = (Object) SerializationUtils.clone(old);

snippet settolist
	Set.stream().collect(Collectors.toList())

snippet join-stream
	list.stream().collect(Collectors.joining(","))

snippet pair
	Pair.of(String, String);

snippet instant-ofEpoch
	Instant i = Instant.ofEpochMilli(1183921121000L).minus(5, ChronoUnit.DAYS);


# ------------------
# Exception Handling
# ------------------

snippet as
	assert ${1:test} : "${2:Failure message}";
snippet ae
	assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
snippet aae
	assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
snippet af
	assertFalse("${1:Failure message}", ${2:condition});
snippet at
	assertTrue("${1:Failure message}", ${2:condition});
snippet an
	assertNull("${1:Failure message}", ${2:object});
snippet ann
	assertNotNull("${1:Failure message}", ${2:object});
snippet ass
	assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet asns
	assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet fa
	fail("${1:Failure message}");
snippet ca
	catch(${1:Exception} ${2:e}) ${0}
snippet thr
	throw ${0}
snippet ths
	throws ${0}
snippet try
	try {

	} catch (Exception e) {

	}



## unit test
snippet mockFuture
	final Future<String> future = mock(Future.class);
	when(future.get()).thenReturn("xxx");

snippet mockDoNothing
	doNothing().when(client).disconnect();

snippet mockinject
	@Mock private o o;
	@Spy private o2 o2;
	@InjectMocks private o3 o3;
	@Before
	public void setUp() throws Exception {
		o = mock(o.class);
		o2 = new o2();
		MockitoAnnotations.initMocks(this);
	}

snippet mockprivate
	Method method = xxObj.getClass().getDeclaredMethod("method_name", Int.class);
	method.setAccessible(true);
	Object[] parameters = new Object[1];
	parameters[0] = 1;
	int ret = (Int) method.invoke(this, parameters);

snippet unitprodvier
	@RunWith(DataProviderRunner.class)
	public class xxxoTest {
		@Test
		@UseDataProvider("provideTestG")
		public void testG(String expect, String val) {

		}

		@DataProvider
		public static Object[][] provideTestG() {
			return new Object[][] {
					{"expect", "val"}
			};
		}
	}

snippet unitprodvier_testng
	import org.testng.annotations.DataProvider;
	public class xxxoTest {
		@Test(dataProvider = "provideTestG")
		public void testG(String expect, String val) {

		}

		@DataProvider(name = "provideTestG")
		public static Object[][] provideTestG() {
			return new Object[][] {
					{"expect", "val"}
			};
		}
	}

snippet doReturn
	doReturn("xx").when(obj).getNxxx(anyString());

snippet options
	import org.apache.commons.cli.HelpFormatter;
	import org.apache.commons.cli.Options;
	import org.apache.commons.cli.Option;
	import org.apache.commons.cli.ParseException;
	import org.apache.commons.cli.CommandLineParser;
	import org.apache.commons.cli.CommandLine;
	import org.apache.commons.cli.BasicParser;

	Options options = new Options();
	Option versionOpt = new Option("v", "version", true, "Version");
	Option helpOpt = new Option("h", "help", false, "read usage()");

	options.addOption(versionOpt).addOption(helpOpt);
	CommandLineParser parser = null;
	CommandLine cmd = null;
	try {
		parser = new BasicParser();
		cmd = parser.parse(options, args);
	} catch (Exception e) {
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("CLITester", options);
		throw e
	}
	boolean help = cmd.hasOption(helpOpt.getOpt());
	if (help) {
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("CLITester", options);
		System.exit(0);
	}
	String version = cmd.getOptionValue(versionOpt.getOpt());

snippet sync
	private volatile syn = null;
	if (null == syn) {
		synchronized (xx) {
			if (null != syn) {
				return syn;
			}
			syn=zzz
		}
	}

snippet powermock
	@RunWith(PowerMockRunner.class)
	@PrepareForTest(StaticClass.class)
	public class XXclassrTest {
		@Test
		public void testStatic() {
			PowerMockito.mockStatic(StaticClass.class);
			when(StaticClass.run("xxx")).thenReturn("zzzzz");
		}
	}

snippet runable
	Callable run = new Callable<Obj>() {
	@Override
		public Obj call() {
			return getObj(id);
		}
	};
	run.call();
