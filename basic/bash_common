# powerline
# ⮑  ⮐ ➞  ♺ │☠⚡♥
#

# path: a>b>c
powerline () {
    host=$1
    arrow=$2
    arrowLight=$3
    local powPath=""
    local bg="$ConstColorBgLevel4"
    local fg="$ConstColorFgLevel1"
    local hostColorArrow="\e[38;2;$bg\e[48;5;230m"
    local hostColorArrow2="\e[38;5;230m\e[48;2;$bg"
    local color="\e[38;2;$fg\e[48;2;$bg"
    local arrowColor="\e[38;2;$bg\e[48;2;$ConstColorTerminalBg"
    if [ ! -z $enableCustFont ]; then
        #\[\ek\h\e\\\] : display screen hostname
        local s1=`perl -e 'print "\xee\x82\xa3 "'`
    else
        local s1=""
    fi
    RET="$color$s1$host$hostColorArrow\[\e[0m\]"
    RET="$RET$hostColorArrow2\[\e[0m\]"
    local path="$PWD"
    case $path in
      $HOME) path="~";;
      $HOME/*) path="~${path#$HOME}";;
      *) powPath="$color \[\e[0m\]";;
    esac

    if [ "x$path" == "x/" ];then
        RET="$RET$color$path $arrowColor$arrow\[\e[0m\]\n"
        return ;
    fi
    split=(${path//\// })
    length=${#split[@]}
    for ((i=0; i<$length;i++))
    do
        if [ ! -z $enableCustFont ]; then
            powPath="$powPath$color${split[$i]} \[\e[0m\]"
            j=$((i+1))
            if [ "$j" == "$length" ];then
                powPath="$powPath$arrowColor$arrow\[\e[0m\]"
            else
                powPath="$powPath$color$arrowLight \[\e[0m\]"
            fi
        else
            powPath="$powPath$color/${split[$i]}\[\e[0m\]"
        fi
    done
    if [ -z $enableCustFont ]; then
        powPath="$powPath$color \[\e[0m\]"
    fi
    PS1="$RET$powPath\n\e[38;2;$ConstColorTerminalFg\e[48;2;$ConstColorTerminalBg"
}

changePS () {
    case $term in
        tmux*)
            getArrow
            screen_title;
        ;;
        screen*)
            getArrow
            screen_title;
        ;;
        xterm*)
            getArrow
            screen_title;
        ;;
        *)
            getArrow
        ;;
    esac
    powerline $host $arrow $arrowLight
}

getArrow() {
    if [ ! -z $enableCustFont ]; then
        if [ `uname` == "Darwin" ]; then
            arrow=`perl -e 'print "\xee\x82\xb0"'`
            arrowLight=`perl -e 'print "\xee\x82\xb1"'`
        else
            arrow=`echo -e "\xee\x82\xb0"`
            arrowLight=`echo -e "\xee\x82\xb1"`
        fi
    else
        arrow=""
        arrowLight=""
    fi
}

screen_path() {
    local path="$PWD"
    case $path in
      $HOME) path="~";;
      $HOME/*) path="~${path#$HOME}";;
    esac
    if [ "x$path" == "x/" ];then
        screenPath=$path
        return ;
    fi
    local split=(${path//\// })
    local length=${#split[@]}
    local i=$((length-1))
    if [ "x$length" != "1" ];then
        path=${split[$i]}
    fi
    screenPath=$path
}

screen_title () {
    screen_path;
    screenPath=`echo $screenPath | cut -c1-13`
    isSetTitle=0;
    hostname=`hostname`
    if [ "xtmux-256color" == "x$term" ]; then
        if [ -f "/usr/bin/tmux" ]; then
            tmux="/usr/bin/tmux";
        elif [ -f "/usr/local/bin/tmux" ]; then
            tmux="/usr/local/bin/tmux"
        fi
        if [ "x" != "x$tmux" ]; then
            hostname=`echo $hostname | cut -c1-6`
            $tmux rename-window $hostname:$screenPath;
            isSetTitle=1;
        fi
    fi
    if [ "x0" == "x$isSetTitle" ]; then
        if [ "x" != "x$host" ]; then
            text=`echo $host | cut -c1-5`
            local title="$text:$screenPath"
        else
            local title=`uname -n | cut -c1-8`
            title="$title:$screenPath"
        fi
        printf '\ek%s\e\\' "$title"
    fi
}

function getMySSHAgent {
    myname=`whoami`
    OS=$(uname -s)
    pids=`ps aux | grep $myname | grep ssh-agent | grep -v grep | awk '{print $2}'`
    pids=( $pids )
    length=${#pids[@]}
    isDone=0
    yubiagent=$HOME/.yubiagent/sock
    if [ -S "$yubiagent" ]; then
        export SSH_AUTH_SOCK=$yubiagent
        return
    fi
    if [[ X"$OS" == X"Linux" ]]; then
        sshagent_socket=$(find /tmp/ssh-* -user `whoami` -type s -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1)
        ssh_agent_info="/tmp/$(whoami).agent.info"
        socket_time=$(echo $sshagent_socket | awk '{print $1}' | awk -F. '{print $1}')
        socket_name=$(echo $sshagent_socket | awk '{print $2}')
        socket_pid=$(echo $sshagent_socket | awk '{print $2}' | awk -F. '{print $2}' )
    fi
    if [ ! -z $socket_pid ];then
        cat <<- EOF > ~/.ssh/environment
            export SSH_AUTH_SOCK=$socket_name
            export SSH_AGENT_PID=$pid
EOF
        source ~/.ssh/environment
        isDone=1
    else
        for(( i=0; i<$length; i++ ))
        do
            pid=${pids[$i]}
            for(( j=0; j<4; j++ ))
            do
                if [[ X"$OS" == X"Darwin" ]]; then
                    # $TMPDIR is environment variable on MAC OS
                    sshagent=`ls $TMPDIR |grep 'ssh' | xargs -n 1 -I%I find $TMPDIR%I -user $myname -type s | grep 'ssh' |grep $pid | xargs ls -rt | awk '{print }'`
                    socket_name=$sshagent
                    #sshagent=$(find $TMPDIR -user `whoami` -type s | grep ssh |grep $pid | xargs ls -rt | awk '{print }')
                elif [[ X"$OS" == X"Linux" ]]; then
                    sshagent=$(find /tmp/ssh-* -user `whoami` -type s -printf '%p\n' 2>/dev/null | grep $pid)
                fi
                if [ "x$sshagent" != "x" ];then
                    cat <<- EOF > ~/.ssh/environment
                        export SSH_AUTH_SOCK=$sshagent
                        export SSH_AGENT_PID=$pid
EOF
                    source ~/.ssh/environment
                    isDone=1
                    break
                fi
                pid=$(($pid - 1))
            done
            if [ $isDone == 1 ];then
                break
            fi
        done
    fi
    if [ -z $isDone ] || [ $isDone == 0 ]; then
        sshagent=$(find /tmp/ssh-* -user `whoami` -type s  -printf '%T@ %p ' 2>/dev/null)
        sshagent=(${sshagent// / });
        for(( i=0; i<${#sshagent[@]}; i++ ))
        do
            agent=${sshagent[$i]}
            pid=`echo "$agent" | grep -o '\.[0-9]*'`
            hasProcess=`ps aux |grep $pid  |grep -v 'grep'| wc -l`
            if [ ! -z $hasProcess ] && [ $hasProcess == 1 ]; then
                cat <<- EOF > ~/.ssh/environment
                    export SSH_AUTH_SOCK=$agent
                    export SSH_AGENT_PID=$pid
EOF
                source ~/.ssh/environment
                isDone=1
                break
            fi

        done
    else
        # link ssh-agent for docker container
        if [ -d ~/docker_tmp ];then
            if [ -f ~/docker_tmp/ssh-agent ];then
                rm -f ~/docker_tmp/ssh-agent
            fi
            mkdir -p ~/docker_tmp/ssh-agent/
            # change the dirname of the ssh-agent tmpdir, I don't want to mount host /tmp to container /tmp
            # -v /tmp:/host_tmp
            socket_name=$(echo $socket_name | sed 's/\/tmp\//\/host_tmp\//')
            if [ ! -z $socket_name ];then
                ln -sf $socket_name ~/docker_tmp/ssh-agent/ssh-agent
            fi
        fi
    fi

}

setTerm() {
    if [ "x" != "x$TMUX" ]; then
        term="tmux-256color"
    fi

    if [[ "x$TERMCAP" = *"screen"* ]];then
        term="screen-256color"
    fi
    if [ "x" == "x$term" ]; then
        term="xterm"
    fi
}

function ssh() {
    getMySSHAgent
    title=$*
    if [ -f "/usr/bin/tmux" ]; then
        tmux="/usr/bin/tmux";
    elif [ -f "/usr/local/bin/tmux" ]; then
        tmux="/usr/local/bin/tmux"
    fi
    if [ "x" != "x$tmux" ]; then
        if [[ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" == *"tmux"* ]]; then
            echo "rename"
            $tmux rename-window "$title"
            #$tmux set-window-option automatic-rename "on" 1>/dev/null
        else
            echo -ne "\ek${title}\e\\"
        fi
    fi

    command ssh "$@"
}

if [ -f ~/.bash_docker ]; then
    . ~/.bash_docker
fi
