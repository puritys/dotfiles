alias tmux='fnTmux'
alias plog='tail -f /tmp/php.log'
alias s='source ~/.bash_profile  '
alias ecliUpdate='fn_ecliUpdate'
alias ecliConfig='fn_ecliConfig'
alias f='findFile'
alias vi='vim -p'
alias vim='vim -p'
alias nvim='nvim -p'
alias cpu="ps aux | awk '{printf \"CPU Usage: %s Process: %s\n\n\", \$3, \$0}' | sort -n"
alias cpuSum="ps aux | awk '{sum += \$3} END {print sum}'"
alias mem="ps aux | awk '{printf \"%s %s\n\",\$4,\$0}' | sort -n"
alias memSum="ps aux | awk '{sum += \$4} END {print sum}' "
alias myHelp='fn_help'
alias ntpSync='sudo ntpdate -s time.stdtime.gov.tw'
alias git='getMySSHAgent; git'
alias gitCloneBranch='fnGitCloneBranch'
alias gitDeleteTag='fnGitDeleteTag'
alias gitDeleteBranch='fnGitDeleteBranch'
alias gitForceCommit='fnGitForceCommit'
alias gitCreateEmptyBranch='fnGitCreateEmptyBranch'
alias gitMergeRepo='fnGitMergeRepo'
alias gitMergeCommit='fnGitMergeCommit'
alias c='/usr/local/bin/myExec.sh'
alias urlencode='sh /usr/local/bin/puritys/urlencode.sh '
alias urldecode='sh /usr/local/bin/puritys/urldecode.sh '
alias so='source ~/.bash_profile'
alias gradleFix='fnGradleFix'
alias cocJavaRemoveAll="echo -e 'rm -rf ~/.config/coc/extensions/coc-java-data/jdt_ws*'; rm -rf ~/.config/coc/extensions/coc-java-data/jdt_ws*"
alias cocJavaTail="echo -e 'tail -f  ~/.config/coc/extensions/coc-java-data/jdt_ws_*/.metadata/.log\n'; tail -f  ~/.config/coc/extensions/coc-java-data/jdt_ws_*/.metadata/.log"
alias cocJavaKill="ps aux |grep 'coc-java-data' |grep 'coc'  |grep -v 'grep|--color-line' | tee /dev/tty | awk '{printf \"kill -9 %s\\n\",\$2}' | tee /dev/tty | sh"
alias readCert="openssl x509 -noout -text -in "

#alias fg='builtin fg $@; printf "\e[H\e[2J"'

if [ -f /usr/bin/ag ]; then
    alias grep='/usr/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
    alias Grep='/usr/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
    alias ag='/usr/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
elif [ -f //usr/local/bin/ag ];then
    alias grep='/usr/local/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
    alias Grep='/usr/local/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
    alias ag='/usr/local/bin/ag --color-line-number "38;5;241" --color-match "38;5;166" --color-path "38;5;29" '
else
    alias Grep='grep'
fi

# fasd
alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias f='fasd -f'        # file
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias z='fasd_cd -d'     # cd, same functionality as j in autojump
alias zz='fasd_cd -d -i' # cd with interactive selection
alias zzz='fasd_cd -d -i' # cd with interactive selection

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# date to timestamp
alias mydate='fnDate'

fn_help() {
    echo "mem: get the process using most memory"
    echo "memSum: get sum of memory usage"
    echo "ecliUpdate: Update .class of java mvn project"


}

fn_ecliUpdate() {
    if [ -f build.gradle ]; then
        hasEclipse=`cat build.gradle |grep 'eclipse' | wc -l`
        if [ $hasEclipse == 0 ]; then
            echo -e "\n\n!!!!!!!!!!!!!!!!!\nPlese add 'id eclipse' into build.gradle. \n\n\n\n"
        fi
        gradle eclipse
    else
        sudo mvn eclipse:clean eclipse:eclipse -Dmaven.pmd.skip=true -Dmaven.checkstyle.skip=true -Dmaven.cpd-check.skip=true -Dmaven.cpd.skip=true -Dcheckstyle.skip -Dmaven.javadoc.skip=true -Dpmd.skip=true
    fi
    if [ -f .classpath ]; then
        sudo chmod 777 .classpath
        sed 's/kind="var"/kind="lib"/' -i .classpath
        h=`echo $HOME | sed 's/\//\\\\\//g'`
        sed "s/M2_REPO/$h\/.m2\/repository/" -i .classpath
    fi
    fn_ecliConfig
}

fn_ecliConfig() {
    sh /usr/local/bin/appendJavaClasspath.sh
    mkdir -p .settings/
    cp $HOME/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.core.prefs .settings/
    cp $HOME/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.apt.core.prefs .settings/

    # eclipse.jdt.ls
    #mkdir -p /root/workspace/jdt.ls-java-project/.settings/
    #sh /usr/local/bin/appendJavaClasspath.sh -f /root/workspace/jdt.ls-java-project/.classpath
    #cp $HOME/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.core.prefs /root/workspace/jdt.ls-java-project/.settings/org.eclipse.jdt.core.prefs

}

findFile () {
    text="*$@*"
    find ./ -iname  $text
}

fnGitCreateEmptyBranch() {
    echo -e "git checkout --orphan $1\n"
    echo -e "git rm --cached -r .\n"
    git checkout --orphan $1
    git rm --cached -r .
}

fnGitDeleteBranch() {
    echo -e "git branch -D $1\n"
    echo -e "git push origin --delete $1\n"
    git branch -D $1
    git push origin --delete $1
}

fnGitForceCommit() {
    echo -e "git commit -m "$1" --no-verify\n"
    git commit -m "$1" --no-verify
}

fnGitDeleteTag() {
    echo -e "git tag -d $@\n"
    echo -e "git push --delete origin $@\n"
    echo "$@" | sed 's/ /\n/' | xargs -t -n 1 -P8 --no-run-if-empty  git tag -d
    echo "$@" | xargs -t -n 1 -P8 --no-run-if-empty  git push --delete origin
}

fnGitCloneBranch() {
    echo -e "git clone --branch $2 --single-branch $1\n"
    git clone --branch $2 --single-branch $1
}
fnGitMergeCommit() {
    git reset --soft $1
    git commit -c ORIG_HEAD
}

# merge another repo to here and keep commit histories
fnGitMergeRepo() {
    while true; do
        if [ "x$1" == "x" ];then
            break;
        fi
        case "$1" in
          -r | --repo   ) REPO=$2; shift 2 ;;
          -d | --dirname ) DIRNAME=$2; shift 2 ;;
          -b | --branch) BRANCH=$2; shift 2 ;;
          -c | --comment) COMMENT=$2; shift 2 ;;
          -h | --help  )
              echo "Usage:"
              echo "-r (repo): the repo path you want to merge: git@github.com:puritys/nodejs-phplike.git"
              echo "-d (dirname): dirname: clone code to this dirname "
              echo "-b (branch): Merge repo to this new branch. Please create branch on git server first and update your local git."
              echo "-c (comment): comment."
              echo "you have to execute 'git push' after this scirpt is done ."
              echo "Example:"
              echo "If I want to move github.com:repo2 to github.com:repo1, dir yyy."
              echo "> git clone github.com:repo1"
              echo "> cd repo1"
              echo "> git checkout -b new_branch_for_merge"
              echo "> gitMergeRepo -r github.com:repo2 -d yyy -b new_branch_for_merge -c \"Move repo2 to yyy\""

              shift 1
              return
              ;;
          --) echo "-- is not a correct option.";shift 1; ;;
          * ) echo "$1 is not a correct option.";shift 1; ;;
        esac
    done
    if [ -z $REPO ] || [ -z $DIRNAME ]; then
        echo "some arguements are missing, use -h to read instruction"
        return
    fi

    if [ -z $BRANCH ] || [ -z $COMMENT ]; then
        echo "some arguements are missing, use -h to read instruction"
        return
    fi

    git checkout $BRANCH
    git remote add new_repo_clone $REPO
    git fetch new_repo_clone
    git branch new_repo_checkout new_repo_clone/master
    git checkout new_repo_checkout
    mkdir -p $DIRNAME
    git ls-tree -z --name-only HEAD | xargs -0 -I {} git mv -f {} $DIRNAME/
    git commit -m "$COMMENT"
    git checkout $BRANCH
    git merge --allow-unrelated-histories new_repo_checkout
    git push --set-upstream origin $BRANCH
    git push origin $BRANCH
}


fnDate() {
    while true; do
        if [ "x$1" == "x" ];then
            break;
        fi
        case "$1" in
          -t | --timestamp   ) timestamp=$2; shift 2 ;;
          -d | --date ) date=$2; shift 2 ;;
          -o | --output ) output=$2; shift 2 ;;
          -h | --help  )
              echo "Usage:"
              echo "mydate -d 20170101 -o time"
              echo "-t: timestamp, ex: -t 12312 "
              echo "-d: date, ex: -d 20170301"
              echo "-o: date/timestamp/time, ex: -o time"
              shift 1
              return
              ;;
          --) echo "-- is not a correct option.";shift 1; ;;
          * ) echo "$1 is not a correct option.";shift 1; ;;
        esac
    done

    os=`uname`
    if [ "x$os" == "xDarwin" ]; then
        case "$output" in
        time*)
            echo `date +%s`
        ;;
        date)
            echo `date "+%Y/%m/%d %H:%M:%S"`
        ;;
        *)
            echo `date -r $1`
        ;;
        esac
    else
        case "$output" in
        time*)
            # date +%s -d "20180305"
            if [ "x" != "x$date" ]; then
                date=" -d $date"
            fi
            cmd="date +%s $date"
        ;;
        date)
            echo `date "+%Y/%m/%d %H:%M:%S"`
            return
        ;;
        *)
            echo "Please use mydate -h"
            return
        ;;
        esac

    fi
    echo "$cmd"
    echo `$cmd`

}

fnTmux() {
    c=$1
    ~/.tmux.conf.sh > ~/.tmux.conf
    if [ -f "/usr/bin/tmux" ]; then
        cmd="/usr/bin/tmux";
    elif [ -f "/usr/local/bin/tmux" ]; then
        cmd="/usr/local/bin/tmux"
    elif [ -f /opt/homebrew/bin/tmux ]; then
        cmd="/opt/homebrew/bin/tmux"
    fi

    if [ ! -f $cmd ]; then
        cmd="/usr/local/bin/tmux"
    fi
    if [ "xls" == "x$c" ] || [ "xsource-file" == "x$c" ]; then
        $cmd $c $2
    else
        $cmd source-file ~/.tmux.conf
        $cmd -2 attach -t $1 || $cmd -2 new -s $1
    fi
}

fnGradleFix() {
    find .gradle/ -name "*.lock" | xargs -t -n 1 sudo rm
    find ~/.gradle/ -name "*.lock" | xargs -t -n 1 sudo rm
    sudo chmod -R 777 .gradle build bin ~/.gradle/ ./container
}
