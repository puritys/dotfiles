" =============== "
" Plugin Settings "
" =============== "

let php_sync_method=-1


"""" Git Gutter
"map <F3> :GitGutterToggle<CR>
"let g:gitgutter_realtime = 0 "trade accuracy for speed
"let g:gitgutter_eager = 0 "trade accuracy for speed
"hi GitGutterAdd ctermfg=green
"hi GitGutterDeleteLine ctermfg=red
""hi GitGutterChange GitGutterChangeDeleteLine
""let g:gitgutter_sign_added = '+'
""let g:gitgutter_sign_modified = 'm'
""let g:gitgutter_sign_removed = '-'

" ----------------
" Airline settings
" ----------------
let g:airline_extensions = ['branch', 'coc']
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
let g:airline_detect_paste=1
let g:airline#extensions#coc#enabled = 1
"let g:airline#extensions#ale#enabled = 1
"let g:airline#extensions#ale#error_symbol = 'E:'
"let g:airline#extensions#ale#warning_symbol = 'W:'
"let g:airline#extensions#ale#show_line_numbers = 1
"let g:airline#extensions#ale#open_lnum_symbol = '(L'
"let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:airline_section_z  = "%l/%L:%c"
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    let g:airline_symbols.linenr = ''
endif
"let g:airline#extensions#tabline#enabled=1
"let g:airline#extensions#tabline#fnamemod=':t' "only show the filaname
"let g:airline#extensions#whitespace#enabled=0 "disable whitespace trailing


"call glaive#Install()
"Glaive codefmt plugin[mappings]
"Glaive codefmt google_java_executable="java -jar /usr/local/lib/google-java-format-1.4-all-deps.jar"
"augroup autoformat_settings
"  autocmd FileType bzl AutoFormatBuffer buildifier
"  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
"  autocmd FileType dart AutoFormatBuffer dartfmt
"  autocmd FileType go AutoFormatBuffer gofmt
"  autocmd FileType gn AutoFormatBuffer gn
"  autocmd FileType html,css,json AutoFormatBuffer js-beautify
"  autocmd FileType java AutoFormatBuffer google-java-format
"  autocmd FileType python AutoFormatBuffer yapf
"  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
"augroup END

" incsearch
"if exists('g:loaded_incsearch')
if !has('nvim')
    if version > 703
        if !empty(glob("~/.vim/plugged/incsearch.vim"))
            if has("unix")
                "let s:uname = system("uname -s")
                "if s:uname == "Darwin\n"
                "else
                    set hlsearch
                    let g:incsearch#auto_nohlsearch = 0 " 0: keep hightlight when mouse cursor move
                    map /  <Plug>(incsearch-forward)
                    map ?  <Plug>(incsearch-backward)
                    map n  <Plug>(incsearch-nohl-n)
                    map N  <Plug>(incsearch-nohl-N)
                "endif
            endif
        endif
    endif
endif

" -----------------
" NerdTree settings
" -----------------

" show line
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" show hidden file
let NERDTreeShowHidden=1
" set with
let NERDTreeWinSize=31
" skip specific file extensions
let NERDTreeIgnore=['\~$', '\.swp', '\.swo']
" show bookmark
let NERDTreeShowBookmarks=1
let g:NERDTreeGlyphReadOnly=0
let g:NERDTreeDirArrowExpandable=1
let g:NERDTreeDirArrowCollapsible=1

" -----------------
" Netrw settings
"
" - Airline and some plugins will require netrw and use it, so I can not disable it.
" - netrw will replace the NerdTree file explore.
" -----------------
let g:netrw_liststyle = 3

" ----------------
" JavaImp settings
" Java import plugin
" ----------------

" A dir to save JavaImp settings and cache files
let g:JavaImpDataDir = $HOME . "/.vim/JavaImp"
" Java Source code path
let g:JavaImpPaths = $HOME . "/openjdk/classes/"


" ----------------
" Snippet settings
" ----------------
"let g:snippets_dir='~/.vim/bundle/vim-snipmate/snippets/'
let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.snippet_version = 1
let g:snipMate.scope_aliases = {}
let g:snipMate.no_default_aliases = 1

let g:snipMate.scope_aliases['javascript'] = 'core_javascript'
let g:snipMate.scope_aliases['html'] = 'core_html,js'
let g:snipMate.scope_aliases['php'] = 'core_php,core_html'
let g:snipMate.scope_aliases['inc'] = 'core_php'
let g:snipMate.scope_aliases['xml'] = 'mvn_pom'
let g:snipMate.scope_aliases['java'] = 'java,groovy'
let g:snipMate.scope_aliases['python'] = 'py'
let g:snipMate.scope_aliases['vim'] = 'vim'

" snippet remap
"let g:snips_no_mappings = 1
"let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 'i')
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 's')
"let s:overwrite = 0
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateVisual', 'x')



" -----------------------
" vim-syntastic/syntastic
" -----------------------
"let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_checkers = ['php']
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_w = 0
let g:syntastic_mode_map={'mode': 'passive'}

"" pangloss/vim-javascript start
"let g:javascript_plugin_jsdoc = 1
"let g:javascript_plugin_ngdoc = 1
"let g:javascript_plugin_flow = 1
"" pangloss/vim-javascript end


"" Tagbar Command
" :TagbarToggle

"" QuickMenu
"let g:quickmenu_options = "HL"
"noremap <silent><F1> :call quickmenu#toggle(0)<cr>
"call quickmenu#reset()
"call quickmenu#append('# Main', '')
"call quickmenu#append('Function List', 'TagbarToggle', "F2")
"call quickmenu#append('NERDTree', 'NERDTree', "tree")
"call quickmenu#append('Find Files', "call fzf#run({'sink':'tabe', 'down': '40%'})", "Ctrl+p")



" --------------
" ale
" --------------
let s:php_language_server=$HOME. "/vendor/bin/php-language-server.php"
if !empty(glob(s:php_language_server))
    let g:ale_php_langserver_executable=s:php_language_server
endif
let g:ale_cpp_clang_options="-std=c++11 -Wall -I./"
let g:ale_sign_warning = 'W>'
let g:ale_sign_error = 'E>'
let g:ale_lint_delay = 300 " only work with g:ale_lint_on_text_changed
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
if has('nvim')
    let g:ale_floating_preview = 1
    let g:ale_hover_cursor = 1
    let g:ale_hover_to_preview = 1
    let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰']
endif
if g:enablePluginAleJavaagent == 1
    let g:ale_java_eclipselsp_javaagent = $HOME . '/lombok.jar'
endif

" Auto open lint error list, error only for this window :lopen
"let g:ale_open_list = 1
"let g:ale_keep_list_window_open = 0

"let g:ale_set_loclist = 0
" error for all session, :copen
"let g:ale_set_quickfix = 1
"let g:ale_list_vertical = 1
"let g:ale_list_window_size = 35
let g:ale_javascript_eslint_use_global = 1
let g:ale_history_enabled = 0
if g:enablePluginAleAutoComplete == 1
    let g:ale_completion_enabled = 1
else
    let g:ale_completion_enabled = 0
endif

let g:ale_linters = {'java': ['checkstyle', 'eclipselsp', 'pmd'],'go': ['gopls', 'gofmt', 'golint'], 'python': ['pyright']}

let g:ale_java_eclipselsp_workspace_path=$HOME . "/workspace"
let s:eclipse = $HOME. "/eclipse.jdt.ls"
if !empty(glob(s:eclipse))
    let g:ale_java_eclipselsp_path = s:eclipse
endif

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint', 'remove_trailing_lines', 'trim_whitespace'],
\   'json': ['fixjson', 'remove_trailing_lines', 'trim_whitespace']
\}
let g:ale_fix_on_save = 1
let g:ale_set_highlights = 1
if !empty(glob("/root/go/bin/gopls"))
    let g:ale_go_gopls_executable="/root/go/bin/gopls"
endif

"""""""""""""""""
" YouCompleteMe "
"""""""""""""""""
if !empty(glob("~/.vim/plugged/YouCompleteMe"))
    " settings: https://github.com/Valloric/ycmd/blob/bb58a436f698e41a69c67590fea5ebc5b05fcb66/ycmd/default_settings.json
    " fixme g:ycm_key_invoke_completion not work
    "if !exists("g:ycm_auto_trigger")
    "    let g:ycm_auto_trigger = 1
    "endif
    let g:ycm_auto_trigger = 1
    let g:ycm_java_jdtls_use_clean_workspace=0
    let g:ycm_min_num_of_chars_for_completion = 1
    "let g:ycm_min_num_identifier_candidate_chars = 0
    "let g:ycm_max_num_candidates = 50 " maxmum
    ""let g:ycm_filetype_whitelist = { '*': 1 }
    ""let g:ycm_complete_in_comments = 1
    let g:ycm_always_populate_location_list = 1
    let g:ycm_key_list_previous_completion = []
    let g:ycm_key_invoke_completion = '<C-d>'
    let g:ycm_key_list_select_completion = []
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_disable_for_files_larger_than_kb = 1000
    let g:ycm_filetype_blacklist = {
          \ 'xml': 1,
          \ 'mvn_pom': 1,
          \}
    if g:enablePluginYouCompleteMeSyntax == 1
        let g:ycm_show_diagnostics_ui = 1
        let g:ycm_enable_diagnostic_signs = 1
        let g:ycm_enable_diagnostic_highlighting = 1
    else
        let g:ycm_show_diagnostics_ui = 0
        let g:ycm_enable_diagnostic_signs = 0
        let g:ycm_enable_diagnostic_highlighting = 0
    endif

    " debug :YcmDebugInfo
    "let g:ycm_keep_logfiles = 1
    "let g:ycm_log_level = 'debug'

    if version > 800 || has('nvim')
        if g:enablePluginYouCompleteMe == 1
            augroup load_ycm
                autocmd!
                autocmd InsertEnter * call plug#load('YouCompleteMe') | autocmd! load_ycm
            augroup END
        endif
    endif

endif

" ---------------------------------
" Valloric/MatchTagAlways
" ---------------------------------
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0


let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'php' : 1,
    \ 'js' : 1,
    \}


"""""""""""""""""
" Autopair"
"""""""""""""""""
let g:AutoPairsMapCR = 0

"" js complete
let g:vimjs#casesensistive = 1
" Enabled by default. flip the value to make completion matches case
" insensitive
"
let g:vimjs#smartcomplete = 0
" " Disabled by default. Enabling this will let vim complete matches at any
" location
" " e.g. typing 'ocument' will suggest 'document' if enabled.
"
let g:vimjs#chromeapis = 0
" " Disabled by default. Toggling this will enable completion for a number of
" Chrome's JavaScript extension APIs


" --------------
" PHP Auto Complete
" shawncplus/phpcomplete.vim
" --------------
let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1
let g:phpcomplete_cache_taglists = 1
let g:phpcomplete_enhance_jump_to_definition = 0

" fzf-session
let g:fzf_session_path="/tmp/fzf_session"



if !empty(glob("~/.vim/plugged/vim-indent-guides"))
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_guide_size = 1
endif



" --------------
" light line
" --------------

if !empty(glob("~/.vim/plugged/lightline.vim"))
    if g:enablePluginLightLine == 1

        let g:lightline = {
              \ 'colorscheme': 'jellybeans',
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ],
              \             [ 'readonly', 'filename' ] ],
              \   'right': [ [ 'lineinfo' ],
              \              [ 'percent' ],
              \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ],
              \ },
              \ 'component_function': {
              \   'charvaluehex': 'coc#status'
              \ },
              \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
              \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
              \ }
        let g:lightline.enable = {
                    \ 'statusline': 1,
                    \ 'tabline': 0
                    \ }
        :set noshowmode

        function! LightlineFilename()
          let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
          let modified = &modified ? ' +' : ''
          return filename . modified
        endfunction
    endif
endif

" --------------
" async run
" :AsyncRun -raw=1 g++ % -o ./a.out
" --------------
:let g:asyncrun_open = 8

" =============== "
" Load Plugin     "
" =============== "

" install vim-plug if not present in nvim
if has('nvim')
    if empty(glob('~/.config/nvim/autoload/plug.vim'))
        silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall
    endif
endif

call plug#begin('~/.vim/plugged')
" ----------------
" Basic plugins
" ----------------
"Plug 'google/vim-maktaba'
Plug 'junegunn/fzf', { 'do': './install --all' } " File finder
Plug 'junegunn/vader.vim' " unit test

" ----------------
" UI Plugins
" ----------------
if g:enablePluginAirline == 1
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
endif

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar' " methond/function list menu
if !has('nvim')
    Plug 'haya14busa/incsearch.vim' " better search plugin
endif
"Plug 'airblade/vim-gitgutter'
"Plugin 'ntpeters/vim-better-whitespace' " show tail whitespace
Plug 'ap/vim-css-color' " show color for color ticket
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Valloric/MatchTagAlways', {'for': ['php', 'html', 'js', 'xml']}
"Plug 'terryma/vim-multiple-cursors'
"
if g:enablePluginLightLine == 1
    Plug 'itchyny/lightline.vim'
endif

Plug 'tpope/vim-obsession'
Plug 'dominickng/fzf-session.vim'

" ----------------
" Themes
" ----------------
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'junegunn/seoul256.vim'
Plug 'arcticicestudio/nord-vim'
" ----------------
" Code change Plugins
" ----------------
"http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plug 'godlygeek/tabular' " align code
Plug 'vim-scripts/PDV--phpDocumentor-for-Vim', {'for': 'php'}
Plug 'puritys/vim-cterm-to-gui', {'for': 'vim'}

"" code format
"Plugin 'google/vim-codefmt'
"Plugin 'google/vim-glaive'
Plug '2072/PHP-Indenting-for-VIm', {'for': 'php'}

" -------------
" Auto Complete
" -------------
"Plug 'ervandew/supertab'
"if version > 800
"    if g:enablePluginYouCompleteMe == 1
"        if !empty(glob("~/.vim/plugged/vim-maktaba"))
"            Plug '~/.vim/plugged/YouCompleteMe', { 'on': [] }
"        endif
"    endif
"endif
Plug '1995eaton/vim-better-javascript-completion', {'for': 'javascript'}
Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}

" Snippet
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'

" ----------------
" Execute command
" ----------------
" Execute self file
Plug 'thinca/vim-quickrun', {'on': 'QuickRun'}
Plug 'skywind3000/asyncrun.vim', {'on': 'AsyncRun'}


" ----------------
" Lint
" ----------------
Plug 'vim-syntastic/syntastic', {'on': 'SyntasticCheck'} " syntax check
Plug 'danro/rename.vim'
if version > 800 || has('nvim')
    Plug 'w0rp/ale'
endif

" ----------------
" Auto complete
" ----------------
" :CocInstall coc-json coc-tsserver
if version > 800 || has('nvim')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif

" others
"Plug 'takac/vim-hardtime' " prevent repeat typing
Plug 'Raimondi/delimitMate'
"Plug 'pangloss/vim-javascript' " javascript hightlight, better indent
"Plug 'groenewege/vim-less'    " less highlight, indent, autocomplete
"Plug 'fatih/vim-go'           " Golang
"Plug 'airblade/vim-gitgutter'
" Menu to remember command
"Plug 'skywind3000/quickmenu.vim'


call plug#end()


" ---------------------------------
" Enable maktabe / codeformat / log
" ---------------------------------
"if !empty(glob("~/.vim/plugged/vim-maktaba"))
"    let g:maktaba = maktaba#Maktaba()
"    let g:vroom_logger = maktaba#log#Logger('DEFAULT')
"    "call g:vroom_logger.log().SetNotificationLevel(g:maktaba#log#LEVELS.ERROR)
"    "call g:vroom_logger.Error('my')
"    "call g:vroom_logger.Debug('Test')
"endif


" ---------------------------------
" Plugin terryma/vim-multiple-cursors
" ---------------------------------

"let g:ale_enabled_org = 0
"func! Multiple_cursors_before()
"  if g:ale_enabled
"      let g:ale_enabled_org = 1
"      let g:ale_enabled = 0
"      call ale#toggle#Disable()
"  endif
"endfunc
"
"func! Multiple_cursors_after()
"  if g:ale_enabled_org == 1
"      g:ale_enabled = 1
"      call ale#toggle#Enable()
"  endif
"
"endfunc

" To update eclipse lsp workspacepath
" gradle / maven or java 8/11 projects could not use the same workspace.
if version > 800
    if !empty(glob("~/.vim/plugged/ale"))
        if &rtp =~ '/plugged/ale'
            let g:ale_java_eclipselsp_workspace_path=$HOME . "/workspace/" . ale#java#FindProjectRoot(@%)
        endif
    endif
endif

" coc setting
let g:coc_status_error_sign = "😡"
let g:coc_status_warning_sign = "🤔"
"" coc integrate lightline status
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
